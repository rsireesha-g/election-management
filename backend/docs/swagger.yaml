openapi: 3.1.0
info: 
   title: Election Management API
   description: api's to manage election process
   version: 1.0.0
servers:
   - url: http://localhost:5000
 
components:
  schemas:
    voter:
      type: object
      properties:
       ID:
        type: integer
       voter_name:
        type: string
       aadhar_id:
        type: string
       DOB:
        type: string
        format: date
        example: 1990-01-01
       gender:
        type: string
       email:
        type: string
       contact_no:
        type: string
       address:
        type: string
    candidate:
      type: object
      properties:
       ID:
        type: integer
       candidate_name:
        type: string
       aadhar_id:
        type: string
       DOB:
        type: string
        format: date
        example: 1990-01-01
       gender:
        type: string
       email:
        type: string
       contact_no:
        type: string
       address:
        type: string
       election_type:
        type: string
    election:
      type: object
      properties:
       ID:
        type: integer
       election_type:
        type: string
    vote:
      type: object
      properties:
       ID:
        type: integer
       voter_id:
        type: integer
       candidate_id:
        type: integer
       election_id:
        type: integer
    vote-count:
      type: object
      properties:
        candidate_name: 
         type: string
        count:
         type: integer
    Error:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer     
paths:
  /voters:
    get:
      summary: Get all voters or a specific voter by email
      description: Returns a list of all voters or a single voter if email is specified.
      parameters:
        - in: query
          name: email
          schema:
            type: string
            format: email
          required: false
      responses:
       '200':
        description: Voter(s) data retrieved
        content:
          application/json:
            schema:
                type: array
                items:
                  $ref: '#/components/schemas/voter'
       '400':
        description: Invalid email
       '404':
        description: Voter not found
       '500':
        description: Internal server error
  /voters/{id}:
    put:
      summary: Update a voter details
      description: A voter object is updated based on the id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/voter'
      responses:
        '201':
          description: Voter updated successfully
        '400':
          description: Invalid voter details input
    delete:
      summary: Delete a voter
      description: A voter object is deleted based on the id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Voter deleted successfully
        '400':
          description: Invalid id
  /candidates:
    get:
      summary: Get a list of all the candidates participating in election
      responses:
        '200':
          description: A JSON array of candidate objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/candidate'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
        '404':
         description: Items Not Found
         content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
    post:
        summary: Create a candidate
        description: adds a candidate data object into the voters table
        requestBody:
          required: true
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/candidate'
        responses:
          '201':
            description: CAndidate created successfully message
          '400':
            description: Invalid input data
  /candidates/{id}:
    put:
      summary: Update a candidate details
      description: A candidate object is updated based on the id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/candidate'
      responses:
        '201':
          description: Candidate updated successfully
        '400':
          description: Invalid candidate details input
    delete:
      summary: Delete a candidate
      description: A candidate object is deleted based on the id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Candidate deleted successfully
        '400':
          description: Invalid id    
  /elections:
    get:
      summary: Get a list of all types of election
      responses:
        '200':
          description: A JSON array of election objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/election'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
        '404':
         description: Items Not Found
         content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
    post:
        summary: Create a election type 
        description: adds a election data object into the elections table
        requestBody:
          required: true
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/election'
        responses:
          '201':
            description: Election created successfully message
          '400':
            description: Invalid input data
  /elections/{id}:
    put:
      summary: Update a election details
      description: A election object is updated based on the id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/election'
      responses:
        '201':
          description: Election updated successfully
        '400':
          description: Invalid election details input
    delete:
      summary: Delete a election
      description: A election object is deleted based on the id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Election deleted successfully
        '400':
          description: Invalid id
  /votes:
    get:
      summary: Get a list of all the votes
      responses:
        '200':
          description: A JSON array of vote objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/vote'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
        '404':
         description: Items Not Found
         content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
    post:
        summary: Create a vote 
        description: adds a vote data object into the votes table
        requestBody:
          required: true
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/vote'
        responses:
          '201':
            description: Vote created successfully message
          '400':
            description: Invalid input data
  /votes/{id}:
    put:
      summary: Update a vote details
      description: A vote object is updated based on the id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vote'
      responses:
        '201':
          description: Vote updated successfully
        '400':
          description: Invalid vote details input
    delete:
      summary: Delete a vote
      description: A vote object is deleted based on the id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Vote deleted successfully
        '400':
          description: Invalid id
  /voters/femaleVotersCountByCandidateId/{candidate_id}:
   get:
    summary: Q1 Get the count of female voters for a particular candidate
    parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
    responses:
     '200':
       description: A JSON array of vote count and candidate ID objects
       content:
        application/json:
         schema:
          type: array
          items:
            type: object
            properties:
             voter_name:
              type: string
     '400':
       description: Invalid ID
       '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
       '404':
         description: Items Not Found
         content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
  /voters/parliamentElection/genderBasedVoterCount:
    get:
      summary: Q2 Fetch count for male & female candidates standing for parliament election
      responses: 
        '200':
           description:  A JSON array of vote count based on gender for parliament election
           content:
        application/json:
         schema:
          type: array
          items:
            type: object
            properties:
             gender: 
              type: string
             No Of Candidates:
              type: integer
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
        '404':
         description: Items Not Found
         content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
  /candidates/election/{election_type}:
    get:
      summary: Q3 Fetch all the candidate names standing for parliament election
      parameters:
        - name: election_type
          in: path
          required: true
          schema:
            type: string
      responses: 
        '200':
           description:  A JSON array of candidate names standing for parliament election
           content:
        application/json:
         schema:
          type: array
          items:
            type: string
            properties:
             candidate_name: 
              type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
        '404':
         description: Items Not Found
         content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
     
  /candidates/count/byCandidate/byElection:
    get:
      summary: Q4 Get the count of votes for each candidates for each election
      responses:
        '200':
          description: A JSON array of vote count and candidate name and election type objects
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                   election_type:
                     type: string
                   candidate_name:
                     type: string
                   count:
                     type: integer
        '400':
          description: Invalid response
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
        '404':
         description: Items Not Found
         content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
  /candidates/count/byCandidate:
    get:
      summary: Q5 Get the count of votes for each candidates 
      responses:
        '200':
          description: A JSON array of vote count and candidate name objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/vote-count'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
        '404':
         description: Items Not Found
         content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
  /candidates/parliament/count/byCandidate:
    get:
     summary: Q6 Get count of votes for each candidate participated in parliament
     responses:
       '200':
         content:
           application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/vote-count'
       '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
       '404':
         description: Items Not Found
         content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
  /candidates/parliament/agedCandidates:
    get:
     summary: Q7 Fetch all the candidates standing for parliament election whose age is greater than 50
     responses:
       '200':
         content:
           application/json:
            schema:
              type: array
              items:
                type: string
       '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
       '404':
         description: Items Not Found
         content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
  /voters/parliamentElection/maleVoters/aged:
    get:
     summary: Q8 Fetch all the male voters voted in parliament election whose age is greater than 50
     responses:
       '200':
         content:
           application/json:
            schema:
              type: array
              items:
                type: string
       '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
       '404':
         description: Items Not Found
         content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
  /auth/signup:
    post:
      summary: User registration
      requestBody:
        required: true
        content:
         application/json:
          schema:
            type: object
            properties:
              user_name: 
                type: string
              email:
                type: string
              password:
                type: string
              user_type:
                type: string
      responses:
        '201':
          description: User Registered successfully!
        '400':
          description: Invalid Data             
  /auth/login:
    post:
      summary: User Login
      requestBody:
        required: true
        content:
         application/json:
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
              user_type:
                type: string
      responses:
        '200':
          description: User Login success!
        '400':
          description: Invalid Data  
        '500':
          description: Server Error
        '401':
          description: Invalid email or password               
  '/auth/users':
    get:
      summary: Get all voters or a specific voter by email
      description: Returns a list of all voters or a single voter if email is specified.
      parameters:
        - in: query
          name: email
          schema:
            type: string
            format: email
          required: false
      responses:
       '200':
        description: Voter(s) data retrieved
        content:
          application/json:
            schema:
                type: array
                items:
                  $ref: '#/components/schemas/voter'
       '400':
        description: Invalid email
       '404':
        description: Voter not found
       '500':
        description: Internal server error
         
        

